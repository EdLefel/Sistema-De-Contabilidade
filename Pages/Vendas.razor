@page "/vendasg"
@using BancoDeDados.Services
@using BancoDeDados.Services.Vendas
@using BancoDeDados.models.Clients
@using System.ComponentModel.DataAnnotations
@using BancoDeDados.services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Models.AddModels
@using Models.Venda
@using System.Security.Claims
@inject VendasService vendasService
@inject ProductService productService
@inject ClientService clientService
@using global::Services.GlobalVars
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<body>
    <h3>Gerenciamento De Vendas</h3>

    <div class="pad"/>

  <!-- Substituido  <button @onclick="OpenModal">Lançar Venda</button> -->

    <button class="c-buttonadd" @onclick="OpenModal">
        <span class="c-main">
            <span class="c-ico"><span class="c-blur"></span> <span class="ico-text">+</span></span>
            Lançar Venda
        </span>
    </button>

    <div class="pad"/>

        <!-- Filtro por período -->
        <div>
            <h6>Filtrar por Período:</h6>
            <h7>Data de Início: </h7>
            <InputDate @bind-Value="startDate" class="size-matters" />
            <h7>Data de Fim: </h7>
            <InputDate @bind-Value="endDate" class="size-matters" />
            <button class="btn btn-primary mt-3" @onclick="FiltrarVendasPorPeriodo">Filtrar</button>
            <button class="btn btn-secondary mt-3" @onclick="LimparFiltro">Limpar Filtro</button>
        </div>

        <div class="client-table">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Adicionado Por:</th>
                        <th>Nome do Cliente</th>
                        <th>Produto</th>
                        <th>Valor</th>
                        <th>Data</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                @if(parametroData == true){
                        @foreach (var sells in paremetroVendas)
                        {
                                <tr class="row-texto">
                                    <td>@sells.Id</td>
                                    <td>@sells.NomeUser</td>
                                    <td>@sells.ClienteNome</td>
                                    <td>@sells.ProdutoNome</td>
                                    <td>@sells.Valor</td>
                                    <td>@sells.DataDaVenda</td>
                                    <td>
                                        <button @onclick="() => EditVenda(sells.Id)">Editar</button>
                                        <button @onclick="() => DeleteVenda(sells.Id)">Excluir</button>
                                    </td>
                            </tr>
                        }
                    }
                    else{
                        @foreach (var sells in paginatedVendas)
                        {
                            <tr class="row-texto">
                                <td>@sells.Id</td>
                                <td>@sells.NomeUser</td>
                                <td>@sells.ClienteNome</td>
                                <td>@sells.ProdutoNome</td>
                                <td>@sells.Valor</td>
                                <td>@sells.DataDaVenda</td>
                                <td>
                                    <button @onclick="() => EditVenda(sells.Id)">Editar</button>
                                    <button @onclick="() => DeleteVenda(sells.Id)">Excluir</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

         <div class="pagination">
            <div class="wc-box">
            <button class="closetwo" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Anterior</button>
            </div
            <span>Página @currentPage de @totalPages</span>
            <div class="wc-box">
            <button class="closetwo" @onclick="NextPage" disabled="@(!HasNextPage)">Próxima</button>
        </div>
        </div>

    @if (showModal)
        {
        <div class="modal-overlay">
            <div class="modal-content">
                <div>
                    <div class="wc-box">
                        <button class="close" @onclick="CloseModal">Fechar</button>
                    </div>

                    <h3>Lançar Venda</h3>

                  <EditForm Model="formModel" OnValidSubmit="SalvarVenda">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <h6 for="nomeUser">Nome do Usuário:</h6>
                        <InputText disabled id="NomeUser" class="form-control" @bind-Value="formModel.NomeUser" />
                    </div>

                    <div class="form-group">
                        <h6>Nome do Cliente:</h6><span>Cliente Id: @formModel.ClienteId</span>
                        <select @bind="formModel.ClienteId" >
                            @foreach (var cliente in clients)
                            {
                                <option value="@cliente.Id">@cliente.Razaosocial</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <h6>Produto:</h6><span>Produto Id: @formModel.ProdutoId</span>
                        <select @bind="formModel.ProdutoId">
                            @foreach (var produto in products)
                            {
                                <option value="@produto.Id">@produto.ProdutoNome</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <h6>Valor:</h6>
                        <InputNumber id="valor" class="form-control" @bind-Value="formModel.Valor" />
                    </div>

                    <div class="form-group">
                        <h6>Parcelas:</h6>
                        <InputNumber id="parcelas" class="form-control" @bind-Value="formModel.Parcelas" />
                    </div>

                    <div class="form-group">
                        <h6>Valor da Dívida:</h6>
                        <InputNumber id="dividaValor" class="form-control" @bind-Value="formModel.DividaValor" />
                    </div>

                    <div class="form-group">
                        <h6>Descrição:</h6>
                        <InputTextArea id="descricao" class="form-control" @bind-Value="formModel.Descricao" />
                    </div>

                    <div class="form-group">
                        <h6>Data da Venda:</h6>
                        <InputDate id="dataVenda" class="form-control" @bind-Value="formModel.DataDaVenda" />
                    </div>

                    <button type="submit" class="btn btn-primary mt-3">Salvar</button>
                    <button type="button" class="btn btn-secondary mt-3" @onclick="CloseModal">Fechar</button>
                </EditForm>
                </div>
            </div>
        </div>

        <button class="btn btn-secondary mt-3" @onclick="CloseModal">Fechar</button>
        }
</body>
@code{
    public Venda newSell = new Venda();
    public List<Venda> vendas;
    private List<Client> clients = new List<Client>();  // Todos os clientes
    public List<Venda> paremetroVendas;
    public List<Product> products = new List<Product>(); 
    public string errorMessage = "";
    private string userName;
    public bool showModal = false;
    private Venda formModel = new Venda();
    public int productId;
    public int clienteId;
    public bool parametroData = false;
    private int currentPage = 1;
    private int pageSize = 25;  // Quantidade de clientes por página
    private int totalPages = 1;
    private bool HasPreviousPage => currentPage > 1;
    private bool HasNextPage => currentPage < totalPages;
    private List<Venda> paginatedVendas = new List<Venda>();  // Clientes paginados

    private DateTime startDate = DateTime.Now.AddMonths(-1); // Por padrão, um mês atrás
    private DateTime endDate = DateTime.Now;

    private async Task FiltrarVendasPorPeriodo()
    {
        //vendas = await vendasService.GetVendasByPeriodAsync(startDate, endDate);
        //Console.WriteLine(vendas.ToString());
        parametroData = true;
        paremetroVendas = vendas
        .Where(v => v.DataDaVenda >= startDate && v.DataDaVenda <= endDate)
        .ToList(); // Ao inves de usar um for loop, eu achei esse método, ele é mais eficiente, limpo e sofisticado.
    }
     private void LimparFiltro()
    {
        parametroData = false;
        paremetroVendas = null;
    }

    private async Task SalvarVenda()
    {

            var cliente = await clientService.GetClientByIdAsync(formModel.ClienteId); // Buscando o cliente pelo ID
            var produto = await productService.GetProductByIdAsync(formModel.ProdutoId); // Buscando o produto pelo ID

    // Preencha os nomes baseados no retorno dos serviços
            formModel.ClienteNome = cliente.Razaosocial;
            formModel.ProdutoNome = produto.ProdutoNome;

        if (formModel.Id != 0) 
        {
            await vendasService.UpdateVendaAsync(formModel);
            vendas = await vendasService.GetVendasAsync();
            showModal = false;
        }
        else if(formModel.Id == 0)
        {
            //errorMessage = "Por favor, preencha todos os campos obrigatórios.";
            await vendasService.CreateVendaAsync(formModel);
            vendas = await vendasService.GetVendasAsync();
            showModal = false;
        }
    }
    private async Task CarregarVendas()
    {
        vendas = await vendasService.GetVendasAsync();
        totalPages = (int)Math.Ceiling(vendas.Count / (double)pageSize);
        LoadCurrentPageVendas();
    }

     private async Task LoadProducts()
    {
        products = await productService.GetProductsAsync();
    }
        private async Task LoadClients()
    {
        clients = await clientService.GetClientsAsync();
    }

     protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            await CarregarVendas();
            await LoadProducts();
            await LoadClients();
            userName = user.FindFirst(ClaimTypes.Name)?.Value;
        }
    }
    public void CloseModal(){
        showModal = false;
    }
    public void OpenModal(){
        showModal = true;
        formModel = new Venda();
    }

        private async Task EditVenda(int id)
    {
        var vendaedit = await  vendasService.GetVendaByIdAsync(id);
        formModel =  vendaedit;
        showModal = true; // Abre o modal para editar
    }

    private async Task DeleteVenda(int id)
    {
        await vendasService.DeleteVendaAsync(id);
        vendas = await vendasService.GetVendasAsync();
        await CarregarVendas();
    }

     private void LoadCurrentPageVendas()
    {
                paginatedVendas = vendas
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            LoadCurrentPageVendas();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            LoadCurrentPageVendas();
        }
    }
}